// +build !

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1alpha1

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/sd-hackday-sentry/sentry-operator/pkg/apis/sentry/v1alpha1.Sentry":       schema_pkg_apis_sentry_v1alpha1_Sentry(ref),
		"github.com/sd-hackday-sentry/sentry-operator/pkg/apis/sentry/v1alpha1.SentrySpec":   schema_pkg_apis_sentry_v1alpha1_SentrySpec(ref),
		"github.com/sd-hackday-sentry/sentry-operator/pkg/apis/sentry/v1alpha1.SentryStatus": schema_pkg_apis_sentry_v1alpha1_SentryStatus(ref),
	}
}

func schema_pkg_apis_sentry_v1alpha1_Sentry(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Sentry is the Schema for the sentries API",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/sd-hackday-sentry/sentry-operator/pkg/apis/sentry/v1alpha1.SentrySpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/sd-hackday-sentry/sentry-operator/pkg/apis/sentry/v1alpha1.SentryStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/sd-hackday-sentry/sentry-operator/pkg/apis/sentry/v1alpha1.SentrySpec", "github.com/sd-hackday-sentry/sentry-operator/pkg/apis/sentry/v1alpha1.SentryStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_sentry_v1alpha1_SentrySpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SentrySpec defines the desired state of Sentry",
				Properties: map[string]spec.Schema{
					"sentryImage": {
						SchemaProps: spec.SchemaProps{
							Description: "SentryImage is the image of sentry we are running (defaults: docker.io/sentry:latest)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"sentryWebReplicas": {
						SchemaProps: spec.SchemaProps{
							Description: "SentryWebReplicas is the number of web workers to spawn (defaults: 2)",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"sentryWorkers": {
						SchemaProps: spec.SchemaProps{
							Description: "SentryWorkers is the number of async workers to spawn (defaults: 3)",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"sentryEnvironment": {
						SchemaProps: spec.SchemaProps{
							Description: "SentryEnvironment is the environment this sentry cluster belongs to (defaults: production)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"sentrySecret": {
						SchemaProps: spec.SchemaProps{
							Description: "SentrySecret is the secret holding the sentry-specific secret config values",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"sentrySecretKeyKey": {
						SchemaProps: spec.SchemaProps{
							Description: "SentrySecretKeyKey is the key inside the sentry secret holding the salt hash string for cryptography (defaults: SENTRY_SECRET_KEY)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"postgresPasswordKey": {
						SchemaProps: spec.SchemaProps{
							Description: "PostgresPasswordKey is the key inside the sentry secret holding the password to connect to the database (defaults: SENTRY_DB_PASSWORD)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"sentrySuperUserEmailKey": {
						SchemaProps: spec.SchemaProps{
							Description: "SentrySuperUserEmailKey is the key inside the sentry secret holding the superuser's email address (defaults: \"SENTRY_SU_EMAIL\")",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"sentrySuperUserPasswordKey": {
						SchemaProps: spec.SchemaProps{
							Description: "SentrySuperUserPasswordKey is the key inside the sentry secret holding the superuser's password (defaults: \"SENTRY_SU_PASSWORD\")",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"postgresHost": {
						SchemaProps: spec.SchemaProps{
							Description: "PostgresHost is the name of server running postgres",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"postgresPort": {
						SchemaProps: spec.SchemaProps{
							Description: "PostgresPort is the port on which the database server is listening (defaults: 5432)",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"postgresDB": {
						SchemaProps: spec.SchemaProps{
							Description: "PostgresDB is the database within postgres we're using",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"postgresUser": {
						SchemaProps: spec.SchemaProps{
							Description: "PostgresUser is the name of the secret containing the database username",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"redisHost": {
						SchemaProps: spec.SchemaProps{
							Description: "RedisHost is the name of the server running redis",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"redisPort": {
						SchemaProps: spec.SchemaProps{
							Description: "RedisPort is the port on which the redis server is listening (defaults: 6379)",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"redisDB": {
						SchemaProps: spec.SchemaProps{
							Description: "RedisDB is the name of the redis instance we're using (defaults: \"0\")",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"sentrySecret", "postgresHost", "postgresDB", "postgresUser", "redisHost"},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_sentry_v1alpha1_SentryStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SentryStatus defines the observed state of Sentry",
				Properties: map[string]spec.Schema{
					"status": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"status"},
			},
		},
		Dependencies: []string{},
	}
}
